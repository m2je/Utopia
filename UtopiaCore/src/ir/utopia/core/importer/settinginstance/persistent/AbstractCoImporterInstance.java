package ir.utopia.core.importer.settinginstance.persistent;


import ir.utopia.core.constants.Constants;
import ir.utopia.core.constants.Constants.BooleanType;
import ir.utopia.core.importer.setting.persistent.CoImportLog;
import ir.utopia.core.importer.setting.persistent.CoImporterSetting;
import ir.utopia.core.persistent.AbstractUtopiaPersistent;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToMany;

/**
 * AbstractCoImporterInstance generated by MyEclipse Persistence Tools
 */
@MappedSuperclass
public abstract class AbstractCoImporterInstance extends AbstractUtopiaPersistent implements
		java.io.Serializable {

	// Fields

	/**
	 * 
	 */
	private static final long serialVersionUID = -982886500484861174L;
	private Long coImporterInstanceId;
	private CoImporterSetting coImporterSetting;
	private Constants.ImportFormat importType;
	private String name;
	private String fileName;
	private String sql;
	private String resourceName;
	private Long sheetIndex;
	private Long fromRow;
	private Long toRow;
	private BooleanType firstLineHeader;
	
	private Set<CoImportLog> coImportLogs = new HashSet<CoImportLog>(0);

	// Constructors

	/** default constructor */
	public AbstractCoImporterInstance() {
	}

	

	

	@GeneratedValue(strategy=GenerationType.TABLE,generator="ImportInstanceGenerator")
	@Id
	@Column(name = "CO_IMPORTER_INSTANCE_ID", unique = true, nullable = false, insertable = true, updatable = true, precision = 10, scale = 0)
	public Long getCoImporterInstanceId() {
		return this.coImporterInstanceId;
	}

	public void setCoImporterInstanceId(Long coImporterInstanceId) {
		this.coImporterInstanceId = coImporterInstanceId;
	}

	@ManyToOne(cascade = {}, fetch = FetchType.LAZY)
	@JoinColumn(name = "CO_IMPORTER_SETTING_ID", unique = false, nullable = false, insertable = true, updatable = true)
	public CoImporterSetting getCoImporterSetting() {
		return this.coImporterSetting;
	}

	public void setCoImporterSetting(CoImporterSetting coImporterSetting) {
		this.coImporterSetting = coImporterSetting;
	}
	@Enumerated(EnumType.ORDINAL)
	@Column(name = "IMPORT_TYPE", unique = false, nullable = false, insertable = true, updatable = true)
	public Constants.ImportFormat getImportType() {
		return this.importType;
	}

	public void setImportType(Constants.ImportFormat importType) {
		this.importType = importType;
	}

	@Column(name = "NAME", unique = false, nullable = false, insertable = true, updatable = true, length = 2000)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "FILE_NAME", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getFileName() {
		return this.fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	@Column(name = "SQL", unique = false, nullable = true, insertable = true, updatable = true)
	public String getSql() {
		return this.sql;
	}

	public void setSql(String sql) {
		this.sql = sql;
	}

	@Column(name = "RESOURCE_NAME", unique = false, nullable = true, insertable = true, updatable = true, length = 100)
	public String getResourceName() {
		return this.resourceName;
	}

	public void setResourceName(String resourceName) {
		this.resourceName = resourceName;
	}

	@Column(name = "SHEET_INDEX", unique = false, nullable = true, insertable = true, updatable = true, precision = 3, scale = 0)
	public Long getSheetIndex() {
		return this.sheetIndex;
	}

	public void setSheetIndex(Long sheetIndex) {
		this.sheetIndex = sheetIndex;
	}

	@Column(name = "FROM_ROW", unique = false, nullable = true, insertable = true, updatable = true, precision = 10, scale = 0)
	public Long getFromRow() {
		return this.fromRow;
	}

	public void setFromRow(Long fromRow) {
		this.fromRow = fromRow;
	}

	@Column(name = "TO_ROW", unique = false, nullable = true, insertable = true, updatable = true, precision = 10, scale = 0)
	public Long getToRow() {
		return this.toRow;
	}

	public void setToRow(Long toRow) {
		this.toRow = toRow;
	}
	@Enumerated(EnumType.ORDINAL)
	@Column(name = "FIRST_LINE_HEADER", unique = false, nullable = true, insertable = true, updatable = true, precision = 1, scale = 0)
	public BooleanType getFirstLineHeader() {
		return this.firstLineHeader;
	}

	public void setFirstLineHeader(BooleanType firstLineHeader) {
		this.firstLineHeader = firstLineHeader;
	}

	

	@OneToMany(cascade = { CascadeType.ALL }, fetch = FetchType.LAZY, mappedBy = "coImporterInstance")
	public Set<CoImportLog> getCoImportLogs() {
		return this.coImportLogs;
	}

	public void setCoImportLogs(Set<CoImportLog> coImportLogs) {
		this.coImportLogs = coImportLogs;
	}

}